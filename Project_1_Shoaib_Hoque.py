import random
import statistics as st
import pandas as pd
import csv

#Data Creation
create = int(input("""
                    How you input data?
                    ----------------------
                    Generated by machine     : 1
                    inputted from text file  : 2
                    inputted from csv        : 3
                    """))

if create == 1:
    
    m=int(input("Enter Total Data: "))
    n=int(input("Maximum Data Range: "))
    data=random.sample(range(n),m)

elif create == 2:
    m = 500
    n = 1000
    data=random.sample(range(1,n),m)

    fp=open("dataf.txt","w")
    for i in data:
        fp.write(str(i)+'\n')
    fp.close()
    print("Data Has been succesfully Written!!!!! ")

    #Data Read from File
    fp=open("dataf.txt","r")
    d=fp.read()
    fp.close()
    

    m=len(d)
    
    #Convert Data string to Int in a list
    data=[]
    temp=''
    for i in range(m):
        if d[i] !='\n':
            temp=temp+d[i]
        else:
            c=int(temp)
            data.append(c)
            temp=''
    m = len(data)        
    print("Legth of Data ",len(data))
        
elif create == 3:
    m = 700
    n = 1000
    values = [random.randint(1, n) for _ in range(m)]

    # Write the values to a CSV file
    filename = "sample_data.csv"
    with open(filename, "w", newline="") as file:
        writer = csv.writer(file)
        writer.writerow(["Data"])  # header
        writer.writerows([[value] for value in values])

    print(f"CSV file '{filename}' has been generated with {m} rows.")

    df = pd.read_csv("sample_data.csv")
    data = list(df["Data"])
    

else:
    print("Invalid choice")

data.sort()
exit_flag = False
br = False
bl = False

while not exit_flag:
    
    method = int(input("""
                        Which Method you want to use
                        ------------------------------
                        Raw Code : 1
                        Library  : 2
                        exit loop: 3
                        """))


    if method == 1:
        
        while not br :

            selection = int(input("""
                                    Which Data you want to analyze
                                    ---------------------------------
                                    Ungrouped Data : 1
                                    Grouped Data   : 2
                                    """))
            #Ungroup data calculation
            if selection == 1:
                print("Data : ",data)
                choice = int(input("""
                                    Ungrouped Data
                                    -------------------
                                    To find Mean : 1
                                    To find Median : 2
                                    To find Mode : 3
                                    """))
                #Mean
                if choice == 1:
                    s=0
                    prod = 1
                    #Aritmatic Mean
                    for i in range(m):
                        s=s+data[i]
                    am=s/m
                    print("Sum: ",s)
                    print("Arirthmatic Mean: ",am)

                    #Geometric Mean
                    for i in range(m):
                        prod=prod*data[i]
                    gm=prod**(1//m)
                    
                    print("Geometric Mean: ",gm)

                    #Harmonic Mean
                    for i in range(m):
                        if data[i] !=0:
                            
                            s=s+(1/data[i])
                    hm=m/s
                    
                    print("Harmonic Mean: ",hm)

                    #Quadratic Mean
                    for i in range(m):
                        s=s+(data[i]**2)
                    
                    qm=(s/m)**(1/2)
                    print("Quadratic Mean: ",hm)
                #Median
                elif choice == 2:
                    if  m%2==1:
                        mid=((m+1)//2)-1
                        print("The Median : ",data[mid])
                    else:
                        mid1=(m+1)//2
                        mid2=mid1-1
                        median=(data[mid1]+data[mid2])/2
                        print("The Median : ",median)
                #Mode
                elif choice == 3:
                    f=[]
                    d=[]
                    for i in range(m):
                        count=1
                        for j in range(i+1, m):
                            if(data[j]==None):
                                continue
                            elif(data[i]==data[j]):
                                count=count+1
                                data[j]=None
                        
                        if(data[i]==None):
                            continue
                        else:
                            d.append(data[i])
                            f.append(count)
                            
                    max_frequency = f[0]
                    max=f[0]
                    for k in range(1, len(f)):
                        if max < f[k]:
                            max=d[k]
                            max_frequency = f[k]
                    print(max)
                    print("The Maximum frequency: ", max_frequency)

                    if max_frequency > 1:
                        
                        for l in range(len(f)):
                            if f[l] == max_frequency:
                                print("The Mode is: ",d[l])
                    else:
                        print("This data has all unique values")
                else:
                    print("Invalid choice")    

            #Grouped Data Selection
            elif selection == 2:

                #Data Grouping
                intv=int(input("Interval: "))
                classLevel=(n//intv)+1
                print("Class Level: ",classLevel)
                a=0
                b=intv
                ll=[]
                ul=[]
                fi=[]
                print("LL\tUL\tFi")
                for i in range(classLevel):
                    count=0
                    ll.append(a)
                    ul.append(b)
                    for j in range(m):
                        if data[j]>=a and data[j]<b:
                            count=count+1
                    fi.append(count)
                    a=a+intv
                    b=b+intv
                    print(ll[i],"\t",ul[i],"\t",fi[i])

                choice = int(input("""
                                    Grouped Data
                                    -------------------
                                    To find Mean : 1
                                    To find Median : 2
                                    To find Mode : 3
                                    """))
                tf=0
                fn=len(fi)
                for i in range(classLevel):
                    tf=tf+fi[i]

                mi=[]
                sum=0
                fimi=[]
                di=[]
                fidi=[]

                for i in range(classLevel):
                    c=(ul[i]+ll[i])/2
                    mi.append(c)
                    
                #Mean
                if choice == 1:
                    #Arithmetic mean
                    method = int(input("""
                                        Which Method do you prefer for Arithmetic Mean
                                        ------------------------------------------------
                                        Direct Method: 1
                                        Short-Cut Method: 2
                                        Step-deviation Method: 3
                                        """))


                    print("\tFor Arithmetic Mean")
                    print("----------------------------------------")
                    #Direct Method
                    if method ==1:
                        
                        print("LL\tUL\tFi\t\t mi\t\tFimi")
                        for i in range(classLevel):
                            c=(ul[i]+ll[i])/2
                            mi.append(c)
                            d=fi[i]*mi[i]
                            fimi.append(d)
                            sum=sum+fimi[i]
                            print(ll[i],"\t",ul[i],"\t",fi[i],"\t\t",mi[i],"\t\t",fimi[i])
                        print("------------------------------------------------------------------")
                        print("TotalFrequency: ",tf,"\t\t   Sum:",sum)

                        adm=sum/tf
                        print("Arithmetic Mean using Direct Method: ",adm)

                    #Shortcut Method
                    elif method == 2:
                        print("LL\tUL\t mi\t Fi\t  di\t\t   Fidi")

                        if  fn%2==1:
                            mid=((fn+1)//2)-1
                        else:
                            mid1=(fn+1)//2
                            mid2=mid1-1
                            mid=(mid1+mid2)//2
                            
                        A = mi[mid]
                        
                        for i in range(fn):
                            d = mi[i] - A
                            di.append(d)
                            fd=fi[i]*di[i]
                            fidi.append(fd)
                            sum=sum+fidi[i]
                            print(ll[i],"\t",ul[i],"\t",mi[i],"\t ",fi[i],"\t",di[i],"\t\t  ",fidi[i])
                        print("------------------------------------------------------------------")
                        print("\tTotalFrequency: ",tf,"\t\t\tSum:",sum)
                        print("A: ", A)

                        asm= A + (sum / tf)
                        print("Arithmetic Mean using Shortcut Method: ",asm)

                    #Step-Deviation Method
                    elif method == 3:
                        print("LL\tUL\t mi\t Fi\t  di\t\t   Fidi")

                        if  fn%2==1:
                            mid=((fn+1)//2)-1
                        else:
                            mid1=(fn+1)//2
                            mid2=mid1-1
                            mid=(mid1+mid2)//2
                            
                        A = mi[mid]
                        C = 10
                        for i in range(fn):
                            d = mi[i] - A
                            di.append(d/10)
                            fd=fi[i]*di[i]
                            fidi.append(fd)
                            sum=sum+fidi[i]
                            print(ll[i],"\t",ul[i],"\t",mi[i],"\t ",fi[i],"\t",di[i],"\t\t  ",fidi[i])
                        print("------------------------------------------------------------------")
                        print("\tTotalFrequency: ",tf,"\t\t\tSum:",sum)
                        print("A: ", A)

                        astm= A + (sum / tf) * C
                        print("Arithmetic Mean using Step-deviation Method: ",astm)



                    #Geometric Mean
                    print("\tFor Geometric Mean")
                    print("---------------------------------------------")
                    prod = 1
                    for i in range(fn):
                        prod=prod*mi[i]
                    gm=prod**(1/tf)
                    print("Product: ",prod)
                    print("Geometric Mean: ",gm)

                    #Harmonic Mean
                    print("\tFor Harmonic Mean")
                    print("----------------------------------------------")
                    fiByxi = []
                    sum = 0
                    print("LL\tUL\tXi\t Fi\t[Fi/Xi]")
                    for i in range(fn):
                        sum=sum+(fi[i]/mi[i])
                        fiByxi.append(fi[i]/mi[i])
                        print(ll[i],"\t",ul[i],"\t",mi[i],"\t",fi[i],"\t",fiByxi[i])
                    print("------------------------------------------------------------------")
                    print("\tTotalFrequency: ",tf,"\tSum:",sum)
                        
                    hm=tf/sum
                    print("Harmonic Mean: ",hm)        

                    #Quadratic Mean
                    s = 0
                    xi2 = []
                    fixi2 = []
                    print("\tFor Quadratic Mean")
                    print("----------------------------------------------")
                    print("LL\tUL\t Xi\t\tFi\t  Xi2\t\t   FiXi2")
                    for i in range(fn):
                        x = (mi[i]**2)
                        xi2.append(x)
                        fxi2 = fi[i]*xi2[i]
                        fixi2.append(fxi2)
                        s = s + fixi2[i]
                        print(ll[i],"\t",ul[i],"\t",mi[i],"\t\t",fi[i],"\t",xi2[i],"\t\t  ",fixi2[i])
                    print("------------------------------------------------------------------")
                    print("\t\tTotalFrequency: ",tf,"\t\t\tSum:",s)
                    print("Square Sum: ",s)
                    qm=(s/tf)**(1/2)
                    print("Quadratic Mean: ",qm)

                elif choice == 2:
                    #Median Calculation
                    cf = []
                    c = 0
                    print("\n\nLl\tUL\tFi\tCf")
                    for i in range(classLevel):
                        c = c + fi[i]
                        cf.append(c)
                        print(ll[i],"\t",ul[i],"\t",fi[i],"\t",cf[i])
                    print("------------------------------------------------------------------")
                    print("\tTotalFrequency: ",tf)
                    index = int(input("Enter index number: "))
                    
                    mid=tf/2
                    qtl = index * (tf/4)
                    dcl = index * (tf/10)
                    ptl = index * (tf/100)
                    c1=0
                    l1=0
                    f=0

                    #Median Class Calculations
                    m_index = 0
                    for i in range(classLevel):
                
                        if mid > cf[i]:
                            m_index = i + 1
                            
                    c1 = cf[m_index -1]
                    f = fi[m_index]
                    l1 = ll[m_index]
                    
                    med=l1+((mid-c1)/f)*intv
                    quartile = l1+((qtl-c1)/f)*intv
                    decile = l1+((dcl-c1)/f)*intv
                    percentile = l1+((ptl-c1)/f)*intv

                    print("M =",mid,"\tLL=",l1, "\tC=",c1, "f=", f, "i=", intv, "\tj\M\K=", index)
                    print("The median : ",med)
                    print(qtl,"% get the Quartile: ", quartile)
                    print(dcl,"% get the Decile: ", decile)
                    print(ptl,"% get the Percentile: ", percentile)

                elif choice == 3:
                    # Mode for group data
                    #Preperation of Grouping Table

                    s=0
                    c2 = []
                    c3 = [0]
                    c4 = []
                    c5 = [0]
                    c6 = [0,0]

                    #column 2
                    for i in range(0,fn-1,2):
                        
                        s = fi[i] + fi[i+1]
                        c2.extend([s]*2)

                    #column 3    
                    for i in range(1, fn-1, 2):
                        
                        s = fi[i] + fi[i+1]
                        c3.extend([s]*2)

                    #column 4
                    for i in range(0, fn-2, 3):
                            
                        s = fi[i] + fi[i+1] + fi[i+2]

                        c4.extend([s]*3)

                    #column 5 
                    for i in range(1, fn-2, 3):
                            
                        s = fi[i] + fi[i+1] + fi[i+2]

                        c5.extend([s]*3)

                    #column 6
                    for i in range(2, fn-2, 3):
                            
                        s = fi[i] + fi[i+1] + fi[i+2]

                        c6.extend([s]*3)

                    print("------------------------------------------------------------------")
                    print("Preperation of a Grouping Table \n----------------------------------------------------------------")    
                    print("Ll\tUL\tFi\tC2\tC3\tC4\tC5\tC6")
                    for i in range(fn):
                        if i < fn - 2:
                            print(ll[i], "\t", ul[i], "\t", fi[i], "\t", c2[i], "\t", c3[i], "\t", c4[i], "\t", c5[i], "\t", c6[i])
                        elif i < fn-1:
                            print(ll[i], "\t", ul[i], "\t", fi[i], "\t", c2[i], "\t", c3[i])
                        else:
                            print(ll[i], "\t", ul[i], "\t", fi[i])
                            
                    #Preparation of an Analysis Table
                            
                    afi = []
                    ac2 = []
                    ac3 = []
                    ac4 = []
                    ac5 = []
                    ac6 = []
                    total = [] 

                    #fi column
                    for i in range(fn):
                        if fi[i] == max(fi):
                            afi.append(1) 
                        else:
                            afi.append(0)

                    #column 2
                    for i in range(fn -1):
                        if c2[i] == max(c2):
                            ac2.append(1) 
                        else:
                            ac2.append(0)

                    #column 3
                    for i in range(fn-1):
                        if c3[i] == max(c3):
                            ac3.append(1) 
                        else:
                            ac3.append(0)

                    #column 4
                    for i in range(fn-2):
                        if c4[i] == max(c4):
                            ac4.append(1) 
                        else:
                            ac4.append(0)

                    #column 5
                    for i in range(fn-2):
                        if c5[i] == max(c5):
                            ac5.append(1) 
                        else:
                            ac5.append(0)

                    #column 6
                    for i in range(fn-2):
                        if c6[i] == max(c6):
                            ac6.append(1) 
                        else:
                            ac6.append(0)

                    #Total Count column
                    for i in range(fn-2):
                        total.append(afi[i] + ac2[i] + ac3[i] + ac4[i] + ac5[i] + ac6[i])
                    print("------------------------------------------------------------------")
                    print("Preperation of a Analysis Table \n----------------------------------------------------------------")    
                    print("Ll\tUL\tFi\tC2\tC3\tC4\tC5\tC6\tTotal")

                    for i in range(fn):

                        if i < fn-2:
                            
                            print(ll[i], "\t", ul[i], "\t", afi[i], "\t", ac2[i], "\t", ac3[i], "\t", ac4[i], "\t", ac5[i], "\t", ac6[i], "\t", total[i])

                        elif i < fn-1:
                            print(ll[i], "\t", ul[i], "\t", afi[i], "\t", ac2[i], "\t", ac3[i])
                        else:
                            print(ll[i], "\t", ul[i], "\t", afi[i])

                    s = 0    
                    f1=0
                    index=0
                    ts = []
                    for i in range(fn-2):
                        if f1<total[i]:
                            f1=total[i]
                            index=i

                        if total[i] == max(total):
                            ts.append(1)
                        else:
                            ts.append(0)
                        s = s + ts[i]

                    if s == 1:
                        print("------------------------------------------------------------------")
                        print("Mode exist into range: ", ll[index], "-", ul[index],":\tTotal max analaysis value -",total[index])
                        f0=fi[index-1]
                        f2=fi[index+1]
                        l1=ll[index]
                        mode=l1+((f1-f0)/(2*f1-f0-f2))*intv

                        print("Calcualted Mode: ",mode)
                    else:
                        print("------------------------------------------------------------------")
                        print("There's existing maximum frequency more than once")

                        #Median for group data
                        c = 0
                        ci = []
                        m = tf/2
                        m_index = 0
                        for i in range(fn):
                            c = c + fi[i]
                            ci.append(c)

                            if m > ci[i]:
                                m_index = i + 1
                                
                        c = ci[m_index -1]   

                        median = ll[m_index] + ((ul[m_index]-ll[m_index])/fi[m_index])*(m - c)
                        print("the grouped median is : ", median)

                        #Mean (step deviation)
                        if  fn%2==1:
                            mid=((fn+1)//2)-1
                        else:
                            mid1=(fn+1)//2
                            mid2=mid1-1
                            mid=(mid1+mid2)//2
                            
                        A = mi[mid]
                        C = 10
                        for i in range(fn):
                            d = mi[i] - A
                            di.append(d/10)
                            fd=fi[i]*di[i]
                            fidi.append(fd)
                            sum=sum+fidi[i]

                        
                        mean= A + (sum / tf) * C
                        print("fidi:", sum)
                        print("A:", A)
                        print("Mean(step deviation):",mean)
                        
                        mode = (3*median)-(2*mean)
                        print("The Final Mode is: (3 x median) - (2 x mean) =  ", mode)

                else:
                    print("Invalid choice")
                
            else:
                print("Invalid choice")
                
            break_condition = input("""
To going back to method section type: back
To continue just press: enter
""")
            if break_condition == "back":
                br = True                                    

                
    elif method == 2:
        while not bl:
            selection = int(input("""
                                    Which Data you want to analyze
                                    ---------------------------------
                                    Ungrouped Data : 1
                                    Grouped Data   : 2
                                    """))
            # Ungrouped data calculation
            if selection == 1:
                print("Data:", data)
                choice = int(input("""
                                    Ungrouped Data
                                    -------------------
                                    To find Mean : 1
                                    To find Median : 2
                                    To find Mode : 3
                                    """))
                if choice == 1:
                    mean = st.mean(data)
                    print("Mean:", mean)
                elif choice == 2:
                    median = st.median(data)
                    print("Median:", median)
                elif choice == 3:
                    mode = st.mode(data)
                    print("Mode:", mode)
                else:
                    print("Invalid choice")

            # Grouped data selection
            elif selection == 2:

                intv = int(input("Interval: "))
                grouped_data = pd.cut(data, bins=range(1, n + intv, intv), include_lowest=True)
                grouped_counts = grouped_data.value_counts().sort_index()
                grouped_data = pd.Series(grouped_data, name='Interval')
                labels = [f'{i}-{j-intv}' for i, j in zip(grouped_data,grouped_data[1:])]
                df = pd.concat([ pd.Series(grouped_counts, name='Frequencies')], axis=1).rename_axis("Interval")
                
                print(df)

                choice = int(input("""
                                    Grouped Data
                                    -------------------
                                    To find Mean : 1
                                    To find Median : 2
                                    To find Mode : 3
                                    """))

                if choice == 1:
                    grouped_mean = st.mean(data)
                    print("Mean:", grouped_mean)
                elif choice == 2:
                    grouped_median = st.median_grouped(data)
                    print("Median:", grouped_median)
                elif choice == 3:
                    grouped_mode = st.multimode(data)
                    print("Mode:", grouped_mode)
                else:
                    print("Invalid choice")


            break_condition = input("""
To going back to method section type: back
To continue just press: enter
""")

            if break_condition == "back":
                bl = True
                                             
    elif method == 3:
        exit_flag = True

    else:
        print("Invalid choice")

